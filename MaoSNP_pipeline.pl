#!/usr/bin/perl

=head1

 MaoSNP_pipeline.pl -- call SNP for RNA-Seq 

 This pipeline are based on bwa alignment and pileup file generated by 
 samtools, C scripts are written by Linyong Mao for calling SNPs. Perl
 scripts are used for connecting all the steps to pipeline. 

 C script: Linyong Mao
 Filter SAM file: Honghe Sun
 perl script: Yi Zheng

 07/04/2013
 
=cut

use strict;
use warnings;
use FindBin;
use IO::File;
use Getopt::Long;

my $usage = qq'
Perl MaoSNP_pipeline.pl input_RNA_seq reference

* example of input RNASeq
sampleName	read_file1,read_file2	read_file3

sampleName must diff with any read file name
read_file1,read_file2 are paired end reads
read_file3 are single end reads
';

my $input = shift || die $usage;
my $genome = shift || die $usage;
my $comparison = shift || die $usage;
#################################################################
# init parameters and vars					#
#################################################################

my $debug = 1;
my $cpu = 24;
my $add_pileup = 1;


#################################################################
# load comparison file to hash					#
#################################################################


#################################################################
# check if the genome is indexed by bwa				#
# check if the genome is indexed by samtools faidx		#
# generate chrOrder file					#
#################################################################
my $chrOrder = check_genome($genome);
my $chrOrder_file = "chrOrder";
save_chrOrder($chrOrder, $chrOrder_file);


#################################################################
# generate command to produce pileup files 			#
#################################################################
my (%cmd_pileup, $cmd_add_pileup) = generate_pileup($list, $genome, $cpu, $debug, $add_pileup);

#################################################################
# perform analysis						#
################################################################# 

if (-s $comparison)
{
	#########################################################
	# checking comparison file to see if the sample exist	#
	#########################################################
	my $cmd_comparison;
	my $fh = IO::File->new($comparison) || die "Can not open comparison file $comparison $!\n";
	while(<$fh>)
	{
		chomp;
		my @a = split(/\t/, $_);
		unless (scalar(@a) == 2) { die "Error 1 in comparion file: sample number $_\n"; }
		if ( defined $$cmd_pileup{$a[0]} &&  defined $$cmd_pileup{$a[1]} ) {} 
		else { die "Error 2 in comparion file: sample name $_\n";}
	}
	$fh->close;

	#########################################################
	# perform comparison analysis				#
	#########################################################
	
	
}


if ()
{

}

if ($reSeqPrintSample)


#################################################################
# kentnf: subroutine						#
#################################################################

=head1 check_genome

 check if the genome is indexed by bwa
 check if the genome is indexed by samtools faidx

=cut
sub check_genome
{
	my $genome = shift;
	my @files = ($genome.".amb", $genome.".ann", $genome.".bwt", $genome.".pac", $genome.".sa", $genome.".fai");
	foreach my $file (@files) 
	{
		if (-s $file) { die "Error, please create genome index using bwa and samtools\n"; }
	}
	
	my $chrOrder;
	my $fh = IO::File->new($genome) || die "Can not open genome file $genome $!\n";
	while(<$fh>)
	{
		chomp;
		if ($_ =~ m/^>/) 
		{
			$chr = $_;
			$chr =~ s/ .*//ig;
			$chrOrder.=$chr."\n";
		}
	}
	$fh->close;

	return $chrOrder;
}

=head1 generate_pileup

 generate pileup command

=cut
sub generate_pileup
{
	my ($list, $genome, $cpu, $debug) = @_;

	my %cmd_pileup;

	my $fh = IO::File->new($list) || die "Can not open input file: $list $!\n";
	while(<$fh>)
	{
		chomp;
		my @a = split(/\t/, $_);
		my $sample_name = $a[0];
		my $pileup_cmds = "";

		my @sort_bam;
		my @reads;

		# perform bwa alignment, generate sam, convert bam, sort, put it to hash
		for(my $i=1; $i<@a; $i++)
		{
			@reads = split(/,/, $a[$i]);

			if ( scalar(@reads) == 2 )
			{
				my ($read1, $read2) = ($reads[0], $reads[1]);
				my ($sai1, $sai2) = ($read1, $read2);

				if ($sai1 =~ m/\.gz$/) {  $sai1 =~ s/\.gz$//; }
				if ($sai2 =~ m/\.gz$/) {  $sai2 =~ s/\.gz$//; } 		
			
				$bam = $sai1; $sort = $sai1;

				$sai1 =~ s/\.fa$/\.sai/;
				$sai2 =~ s/\.fa$/\.sai/;
	                        $bam =~ s/\.fa$/\.bam/;
        	                $sort =~ s/\.fa$/_sort/;
                	        $sort_bam = $sort.".bam";

				my $bwa_align_cmd1 = "bwa aln -t $cpu -n 0.02 -o 1 -e 2 -f $sai1 $genome $read1";
				my $bwa_align_cmd2 = "bwa aln -t $cpu -n 0.02 -o 1 -e 2 -f $sai2 $genome $read2";
				$pileup_cmds.=$bwa_align_cmd1."\n";
				$pileup_cmds.=$bwa_align_cmd2."\n";

				my $bwa_sam_cmd = "bwa sampe $genome $sai1 $sai2 $read1 $read2 | filter_for_PEsnp.pl | samtools view -bS -o $bam -";
				$pileup_cmds.=$bwa_sam_cmd."\n";

				my $sort_cmd = "samtools sort $bam $sort";
				$pileup_cmds.=$sort_cmd."\n";
			
				push(@sort_bam, $sort_bam);
			}
			elsif ( scalar(@reads) == 1 )
			{
				my $read = $a[$i];
				my $sai = $read;
				if ($sai =~ m/\.gz$/) {  $sai =~ s/\.gz$//; }

				my ($bam, $sort) = ($sai, $sai);

				$sai =~ s/\.fa$/\.sai/;
				$bam =~ s/\.fa$/\.bam/;
				$sort =~ s/\.fa$/_sort/;
				$sort_bam = $sort.".bam";
				my $bwa_align_cmd = "bwa aln -t $cpu -n 0.02 -o 1 -e 2 -f $sai $genome $read";
				$pileup_cmds.=$bwa_align_cmd."\n";
			
				my $bwa_sam_cmd = "bwa samse $genome $sai $read | filter_for_SEsnp.pl | samtools view -bS -o $bam -";
				$pileup_cmds.=$bwa_sam_cmd."\n";
			
				my $sort_cmd = "samtools sort $bam $sort";
				$pileup_cmds.=$sort_cmd."\n";

				push(@sort_bam, $sort_bam);
			}
			else
			{
				print "Error in input sample files $!\n";
			}
		} 

		# merge all bam files
		my $all_bam = $sample_name.".bam";
		my $s_bam = join(" ", @sort_bam);
		my $sam_merge_cmd = "samtools merge -f $all_bam $s_bam";
		$pileup_cmds.=$sam_merge_cmd."\n";

		# pileup all files
		my $all_pileup = $sample_name.".pileup";
		my $mpileup_cmd = "samtools mpileup -q 16 -Q 0 -d 10000 -f $genome $all_bam > $all_pileup";
		$pileup_cmds.=$mpileup_cmd."\n";

		# reprint
		# my $all_1col = $sample_name.".1col";	
		# my $print_sample_cmd = "reSeqPrintSample.indel.fast $genmoe $all_1col $all_pileup $sample_name 2 2 0.3";
		# print $print_sample_cmd."\n" if $debug;
		# system($print_sample_cmd) && die "Error in command $print_sample_cmd\n";

		$cmd_pileup{$sample_name} = $pileup_cmds;
	}
	$fh->close;

	return %cmd_pileup;
}



